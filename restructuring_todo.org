#+TITLE: Restructuring Todo
#+DESCRIPTION: A list of things to do in order to restructure the simulations to 1) make sense, and 2) be extensible to 3D
#+AUTHOR: Lucas Myers

* Restructuring todo
** TODO Write set of parameter files which cover most situations
  - [ ] Cover all boundary conditions
  - [ ] Cover all grid types
  - [ ] Cover different refinement situations
  - [ ] Cover different grid assemblies

** TODO Restructure assembly
  - [X] Separate all system assembly functions into their own compilation units
  - [X] Write 3D implementations by throwing  not implemented exceptions
  - [ ] Package some inputs together into LinearSystem structs
  - [ ] Write `assemble_system` objects which all derive from some virtual class

** TODO Simplify simulation
  - [X] +Get rid of fixing defect locations from system+
    - [X] Write another `interpolate_boundary_values` including affine_constraints
  - [X] For now, find_defects should be specialized differently, just throwing an exception in 3D
    - In the future, will be a solution evaluation object that will only be implemented in 2D, and will throw an exception if you try to construct in 3D.
  * [X] `calc_energy` should be separated into its own compilation unit, and should be specialized differently between 2D and 3D.
  - [X] Anything dealing with defect points will need to be specialized in 2D and thrown an exception in 3D.

  - [X] Fix grid refinement so that it works for 3D
  - [X] +Get rid of refine around defects+
  - [X] +Put `sort_defects` in numerics+
    - Did not end up doing this, just deleted
  - [X] +Put `recenter_defect_points` in numerics (or grid???) and refactor it to take in arbitrary points+
    - Did not end up doing this, just deleted it
  - [X] Unify functions which iterate timestep (should be able to make all the same with Newton Method interface)
  - [X] Refactor `run` a lot -- that whole thing is a mess

** TODO Fix all `BoundaryValues`
  - [ ] For now, just make two defect stuff work in 3D

** TODO Adaptive mesh refinement
  - [ ] For initial condition, iteratively project and then refine based on the latest projection
  - [ ] After that, refine every n time-steps, and do the typical solution projection

** TODO Use TOML files for configuration
  - [ ] Pull initialization of `nematic_system` from `nematic_driver` and pass in as a unique_ptr
  - [ ] Will need to pass in unique_ptr of triangulation to `nematic_driver`
  - [ ] Initialize the rest of `nematic_driver` via constructor rather than the `get_parameters` function
  - [ ] Initialize `nematic_system` via constructor, rather than with `get_parameters` function.
  - [ ] 
