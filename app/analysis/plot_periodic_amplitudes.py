import argparse
import os

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl

mpl.rcParams['figure.dpi'] = 300

plt.style.use('science')

def get_commandline_args():


    description = ("Plot amplitudes from periodic configuration from csv files"
                   " generated by Paraview 'Plot selection over time'")
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('--data_folder', dest='data_folder',
                        help='folder where defect location data lives')
    parser.add_argument('--spreadsheet_names',
                        dest='spreadsheet_names',
                        nargs='*',
                        help='list of names of csv files where amplitude data is')
    parser.add_argument('--output_folder',
                        dest='output_folder',
                        default=None,
                        help='folder that output file will be written to')
    parser.add_argument('--plot_filename',
                        dest='plot_filename',
                        help='filename of amplitude plot')

    parser.add_argument('--time_key',
                        dest='time_key',
                        default='Time',
                        help='key in csv file corresponding to time data')
    parser.add_argument('--amplitude_key',
                        dest='amplitude_key',
                        default='avg(S)',
                        help='key in csv file corresopnding to amplitude data')

    parser.add_argument('--dt_vals',
                        dest='dt_vals',
                        type=float,
                        nargs='*',
                        help='values for dt corresponding to spreadsheet names')

    args = parser.parse_args()

    spreadsheet_names = []
    for spreadsheet_name in args.spreadsheet_names:
        spreadsheet_names.append( os.path.join(args.data_folder, 
                                               spreadsheet_name) )

    output_folder = None
    if not args.output_folder:
        output_folder = args.data_folder
    else:
        output_folder = args.output_folder

    output_filename = os.path.join(output_folder, args.plot_filename)

    return (spreadsheet_names, output_filename,
            args.time_key, args.amplitude_key, args.dt_vals)



def main():

    (spreadsheet_names, output_filename,
     time_key, amplitude_key, dt_vals) = get_commandline_args()

    data = []
    for spreadsheet_name in spreadsheet_names:
        data.append( pd.read_csv(spreadsheet_name) )

    t = []
    amplitudes = []
    for datum, dt in zip(data, dt_vals):
        t.append(datum[time_key].values * dt)
        amplitudes.append(datum[amplitude_key].values)

    fig, ax = plt.subplots()
    for time, amplitude, dt in zip(t, amplitudes, dt_vals):
        ax.plot(time, amplitude, label='dt = {}'.format(dt_vals))

    ax.set_title('eigenvalue amplitude of periodic configuration')
    ax.set_xlabel('time')
    ax.set_ylabel('maximal eigenvalue')
    ax.set_xlim([-1, 20])
    fig.tight_layout()

    fig.savefig(output_filename)

    plt.show()


if __name__ == '__main__':
    main()
